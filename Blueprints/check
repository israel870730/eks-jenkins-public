module "eks_blueprints" {
  source  = "terraform-aws-modules/eks/aws"

  cluster_name    = var.cluster_name
  cluster_version = var.cluster_version
  enable_irsa     = var.enable_irsa
  cluster_enabled_log_types = var.cluster_enabled_log_types
  cluster_endpoint_public_access = var.cluster_endpoint_public_access
  cluster_endpoint_private_access = var.cluster_endpoint_private_access
  
  # EKS Add-ons
  cluster_addons = {
    aws-ebs-csi-driver = {
      most_recent = true
    }
    vpc-cni = {
      most_recent = true
    }
    amazon-cloudwatch-observability = {
      most_recent = true
    }
  }
  
  vpc_id = module.vpc.vpc_id
  subnet_ids = module.vpc.private_subnets
  

  eks_managed_node_groups = {
    role = {
      capacity_type   = "ON_DEMAND"
      node_group_name = "general"
      instance_types  = ["t3a.xlarge"]
      desired_size    = "1"
      max_size        = "5"
      min_size        = "1"
      enable_bootstrap_user_data = true
      #additional_tags = { ExtraTag = "Fargate" }

      #name            = "ON_DEMAND"
      #ami_id = "ami-0edd73fffdd8574b5"
      #enable_bootstrap_user_data = true      
    }
  }
  tags = local.tags
}

provider "kubernetes" {
  host                   = module.eks_blueprints.eks_cluster_endpoint
  cluster_ca_certificate = base64decode(module.eks_blueprints.eks_cluster_certificate_authority_data)

  exec {
    api_version = "client.authentication.k8s.io/v1beta1"
    command     = "aws"
    # This requires the awscli to be installed locally where Terraform is executed
    args = ["eks", "get-token", "--cluster-name", module.eks_blueprints.eks_cluster_id]
  }
}